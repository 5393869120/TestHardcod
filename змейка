import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;

public class SnakeGame extends JPanel implements ActionListener, KeyListener {
    private final int TILE_SIZE = 25; // Размер клетки
    private final int GAME_SIZE = 20; // Размер поля (20x20)
    private final int DELAY = 150; // Скорость игры (мс)

    private final ArrayList<Point> snake = new ArrayList<>();
    private Point food;
    private String direction = "RIGHT";
    private boolean running = true;

    private Timer timer;

    public SnakeGame() {
        setPreferredSize(new Dimension(GAME_SIZE * TILE_SIZE, GAME_SIZE * TILE_SIZE));
        setBackground(Color.BLACK);
        setFocusable(true);
        addKeyListener(this);

        initializeGame();
        timer = new Timer(DELAY, this);
        timer.start();
    }

    private void initializeGame() {
        snake.clear();
        snake.add(new Point(5, 5)); // Начальная позиция змейки
        snake.add(new Point(4, 5));
        snake.add(new Point(3, 5));
        spawnFood();
    }

    private void spawnFood() {
        Random random = new Random();
        int x, y;
        do {
            x = random.nextInt(GAME_SIZE);
            y = random.nextInt(GAME_SIZE);
        } while (snake.contains(new Point(x, y)));
        food = new Point(x, y);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Рисуем змейку
        g.setColor(Color.GREEN);
        for (Point p : snake) {
            g.fillRect(p.x * TILE_SIZE, p.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
        }

        // Рисуем еду
        g.setColor(Color.RED);
        g.fillRect(food.x * TILE_SIZE, food.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);

        if (!running) {
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.BOLD, 20));
            g.drawString("Game Over", (GAME_SIZE * TILE_SIZE) / 3, (GAME_SIZE * TILE_SIZE) / 2);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (running) {
            move();
            checkCollision();
            repaint();
        }
    }

    private void move() {
        Point head = snake.get(0);
        Point newHead = switch (direction) {
            case "UP" -> new Point(head.x, head.y - 1);
            case "DOWN" -> new Point(head.x, head.y + 1);
            case "LEFT" -> new Point(head.x - 1, head.y);
            case "RIGHT" -> new Point(head.x + 1, head.y);
            default -> head;
        };

        snake.add(0, newHead);
        if (newHead.equals(food)) {
            spawnFood(); // Если съели еду, появляем новую
        } else {
            snake.remove(snake.size() - 1); // Убираем хвост
        }
    }

    private void checkCollision() {
        Point head = snake.get(0);

        // Проверяем столкновение со стенами
        if (head.x < 0 || head.x >= GAME_SIZE || head.y < 0 || head.y >= GAME_SIZE) {
            running = false;
        }

        // Проверяем столкновение с телом змейки
        for (int i = 1; i < snake.size(); i++) {
            if (head.equals(snake.get(i))) {
                running = false;
            }
        }

        if (!running) {
            timer.stop();
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();

        if ((key == KeyEvent.VK_UP) && !direction.equals("DOWN")) {
            direction = "UP";
        } else if ((key == KeyEvent.VK_DOWN) && !direction.equals("UP")) {
            direction = "DOWN";
        } else if ((key == KeyEvent.VK_LEFT) && !direction.equals("RIGHT")) {
            direction = "LEFT";
        } else if ((key == KeyEvent.VK_RIGHT) && !direction.equals("LEFT")) {
            direction = "RIGHT";
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("Snake Game");
        SnakeGame gamePanel = new SnakeGame();

        frame.add(gamePanel);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}